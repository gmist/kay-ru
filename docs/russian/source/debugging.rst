=======
Отладка
=======

Отладчик werkzeug
=================

Kay имеет интегрированный отладчик werkzeug's и используется по умолчанию
в локальном сервере разработки. К сожалению, он не может быть использован
на стороне сервера AppEngine.

Этот отладчик работает в браузере разработчика и запускается когда какое-либо
приложение бросает исключение, которое затем не перехватывается. Вы можете
использовать интерактивную консоль и просматривать исходный код на каждом шаге
трассировки стека вызовов.

Кроме того, вы также можете видеть трассировку стека в виде простого текста
при хостинге вышего сервиса в сети Интернет.


Отображеие отладчика
--------------------

При разработке, после броска исключения, вы можете увидеть следующий экран:

.. image:: images/debugger.png
   :scale: 80

На котором отображены строчки исходного кода и стек вызова. В правой части,
когда вы наведете курсор "мыши" на строку с исходным кодом, появятся
следующие иконки::

.. image:: images/debugger-icons.png

Если вы кликните по левой иконке, то появится интерактивная консоль. Если вы
кликните по правой иконке, то вы увидите исходный код и подсвеченной линией,
в которой возникло исключение.


Интерактивная консоль
---------------------

Это скриншот интерактивной консоли.

.. image:: images/debugger-console-startup.png
   :scale: 80

В этой консоли вы можете выполнять любой код на python. Очень полезно то, что
этот код будет выполнени внутри фрейма информации на момент возникновения
исключения.

Например, выполните ``locals()`` и вы получите словарь с локальными
переменными.

.. code-block:: python

  [console ready]
  >>> locals()
  {'request': <Request 'http://localhost:8080/' [GET]>}
  >>>

Исправление опечатки и перезапуск вашего кода даст вам правильный результат.

.. code-block:: python

  [console ready]
  >>> comments = Comment.all().order('-created').fetch(100)
  >>> comments
  [<myapp.models.Comment object at 0x104c6c8d0>]
  >>> 

Если вы кликните по иконке еще раз, то вы скроете интерактивную консоль.


Просмотр исходного кода
-----------------------

Это исходный код вызвавший исключение. Линия вызвашая это исключение
подсвечена.

.. image:: images/debugger-view-source.png
   :scale: 80

Есои вы снова кликните по заголовку ``View Source``, то вы скроете окно с
исходным кодом.


Просмотр стека вызовов в виде простого текста
---------------------------------------------

Если вам нужно вставить стек вызовов в e-mail или сделать еще что-то подобное,
то вы можете кликнуть по загловку ``Traceback`` как показано ниже:

.. image:: images/debugger-traceback-title.png
   :scale: 80

Если вы кликните по этому заголовку, то отображение стека вызовов изменится
на Debugger/Plaintext. Вот как выглядит экран просмотра трассировки в виде
простого текста.

.. image:: images/debugger-plaintext-view.png
   :scale: 80


Отсылка трассировки
-------------------

Когда вы видите трассировку в виде простого текста, там присутствует кнопка
с текстом ``create past``. Если вы кликните по этой кнопке, Kay отправит эту
трассировку на специальный сервис, который расположен по адресу:
http://paste.shehas.net/ . Если отправка трассировки будет успешной, то будет
показана ссылка на нее.

.. image:: images/debugger-paste-succeed.png
   :scale: 80

Это скриншот этого сервиса по обмену кусками кода.

.. image:: images/debugger-paste-service.png
   :scale: 80


Исключения в шаблонах Jinja2
----------------------------

Если исключение возникает в шаблоне Jinja2, то вы увидите "телеграфную"
и плохо читаемую трассировку внутри отладчика. Это происходит из-за
ограничения AppEngine (он не использует ctypes). Для обхода этого ограничения
вы можете использовать обход в виде патча dev_appserver.py в AppEngine SDK.

После добавления модулей 'gestalt' и '_ctypes' в список
``_WHITE_LIST_C_MODULES`` вы увидите нормальное отображение трассировки внутри
отладчика.

Нужно сказать, что некоторые дистрибутивы Python имеет поломанную версию
ctypes (например, последняя версия python25 в macports) и описанный выше
обходной способ может не работать. В этом случае есть еще одит обходной способ
в виде копирования '_speedups.so' в директорию ``kay/lib/jinja2`` из другой
инсталяции jinja2 (т.е. не из поставки Kay) и добавления '_speedups' в список
``_WHITE_LIST_C_MODULES``. Если вы используете MacOSX, то наиболее простым
способом получения скомпилированнокго '_speedus.so' будет  установка
py25-jinja2 из macports.


Использование pdb
=================

В процессе разработки вы также можете использовать pdb. Если вы вызовете
:func:`kay.utils.set_trace` в любом месте вышего кода, то выполнение вашей
программы остановится и вы увидите строку приглашения pdb в консоле, в которой
вы запустили сервер разработки (``manage.py runserver``).

Например, вы можете вы можете пошагово выполнить вышу программу с помошью
команды ``step``. Для более подробной информации, как использовать PDB,
обратитесь к документации по следующему URL:

* http://www.python.org/doc/2.5.4/lib/debugger-commands.html
