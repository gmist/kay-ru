==========
Декораторы
==========

.. module:: kay.utils.decorators

Декораторы представления
========================

Kay включает в себя ряд декораторов, которые могут применяються в представлениях
и делают разработку в среде App Engine проще.

.. function:: maintenance_check(endpoint='_internal/maintenance_page')

    Декоратор ``maintenance_check()`` проверяет, находится ли App Engine в
    режиме обслуживания и если это так, то он перенаправляет пользователя на
    страницу c информацией о профилактических работах. По умолчанию, в
    качестве URL для данной страницы, используется адрес
    '_intrnal/maintenance_page', но он может быть изменен с помощью
    соотвествующего параметра, передающегося в этот декоратор.    
    
    ::

        @maintenance_check
        def my_view(request):
            # ...
            return response

.. function:: cron_only()
    Декоратор ``cron_only()`` можно использовать когда есть необходимость чтобы
    только cron сервис App Engine имел доступ к представлению. Этот декоратор
    проверяет заголовок HTTP запроса и если он не соотвествует cron сервису
    App Engine, то декоратор возвращает 403 код состояния HTTP. Если
    :attr:`DEBUG` содержит ``True`` и приложение выполняется на сервере
    разработки, то запрос к декорируемой функции не допускается и данный
    декоратор вызовет исключение. 

    ::

        @cron_only
        def my_cron_view(request):
            # ...
            return response

Вспомогательные декораторы
==========================

.. function:: retry_on_timeout(retries=3, secs=1)

    Декоратор ``retry_on_timeout()`` вызывает декорируемую функцию заданное
    число раз с установленным промежутком времени между вызовами, если при
    вызове фунции, при работе с хранилищем App Engine, возникает исключение по
    таймауту. Декорируема функция должна быть
    `идемпотентна <http://ru.wikipedia.org/wiki/Идемпотентность>`_, это
    означает, что при вызове функции несколько раз подряд, результ работы
    функции будет одинаковый и он не приведет к каким либо нежелательным
    последствиям (например, у удалению нескольких записей подряд или
    многократному суммированию госдолга США).

    ::

        @retry_on_timeout(retries=5)
        def my_writer_func():
            # Some datastore operation
            return

.. function:: auto_adapt_to_methods()

    Вспомогательный декоратор ``auto_adapt_to_methods()`` является оберткой
    над другими декораторами и позволяет эти использовать декораторы, для
    методов классов принимающих аргументы.    
    
    ::

        @auto_adapt_to_methods
        def my_decorator(func):
            def new_func():
                # ...
                return
            return new_func

.. function:: memcache_property(key_f, expire=0)

    Этот декоратор превращает функцию в "ленивое"" свойство. Декорируемая
    функция, вызванная в первый раз, вычисляет и возвращает результат, который
    возвращается при дальнейших вызовах этой фукции без необходимости
    повторения вычислений. В декоратор передается один обязательный аргумент - 
    ключ, который используется для доступа к memcache. Также может передаваться
    параметр expire, который задает время (в секундах) жизни закэшированного
    результата, по истечению которого вызываемая функция заново отработает и
    декоратор закэширует новый результат.

        class Foo(db.Model):

        @memcached_property(lambda o: "Foo:%s:foo" % o.key().name())
        def foo(self):
          # подсчет чего-то очень важноо
          return 42
    
    Чтобы этот декоратор работал, класс должен иметь возножность быть
    представленным в виде словаря __dict__.
