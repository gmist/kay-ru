===============================
Резервирование и восстановление
===============================


**New in Kay-0.2.0**

Обзор
-----

Последние релизы App Engine SDK имеют встроенные средства
для резервировани/восстановления данных. Эта фукциональность может быть
применена для резервирования и восстановления любых данных из хранилища.
Нужно заметить, что для резервирования/восстановления всего хранилища вам
придется выполнить эти команды для всех объектов, которые находятся в вашем
хранилище и вы будете вынуждены делать это каждый раз, когда вам захочется
сделать полное резервирование или восстановление. Kay имеет специальные
команды-обертки, которые делают резервирование/восстановление хранилища легким
и простым делом.

Сейчас мы рассмотрим эти команды. Не забудьте, что они должны выполняться в
директории вашего проекта.


Резервирование с серверого окружения
------------------------------------

Для резервирования всех данных с серверного окружения, вы можете выполнить
следующую команду:

.. code-block:: bash

  $ python manage.py dump_all -n 20090919

Имейте в виду, что данная команда определит URL для доступа к приложению из
app.yaml вашего проекта.

Эта команда запросит ваше имя и пароль, введите их, после чего вся информация
будет сохранена в директории ``_backup/20090919``. Все ваши данные будут
сохранены в файлах с расширением ``.dat``. Вы можете менять название директории
для резервирования, используя параметр -n.


Очистка всех данных на серверном окружении
------------------------------------------

Для удаления всех данных с серверного окружения, вы можете воспользоваться
следующей командой:

.. code-block:: bash

  $ python manage.py clear_datastore [-c]

Для удаления всех данных из memcache, вы можете использовать эту команду с
параметром -c.


Восстановление данных на серверное окружение
Restoring dumped data to a server environment
---------------------------------------------

Вы можете восстоновить сохраненные данные из директории ``20090919`` на
серверное окружение следующей командой:

.. code-block:: bash

  $ python manage.py restore_all -n 20090919

В некоторых случаях, перед выполнением этой команды, вам будет необходимо
удалить все данные с сервера (TODO: Описать эти случаи более подробно).


Резервирование данных с локального сервера разработки
-----------------------------------------------------

Перед тем, как выполнять резервирование/восстановление данных на локальном
сервере разработки, его необходимо запустить командой
``python manage.py runserver``. После запуска вы можете зарезервировать все
данные с помощью следующей команды:

.. code-block:: bash

  $ python manage.py dump_all -n 20090919local -u http://localhost:8080/remote_api

Как вы могли заметить, единственное отличие, между резервированием с серверного
окружения и с локального сервера разработки, в использовании параметра ``-u``.


Удаление всех данных с локального сервера разработки
----------------------------------------------------

Для удаления всех данных на локальном сервере разработки, остановите его и
перезапустите с параметром ``-c``.

.. code-block:: bash

  $ python manage.py runserver -c


Восстановление данных на локальный сервер разработки
----------------------------------------------------

Для восстановления ранее зарезервированных данных на локальный сервер
разработки, вы должны должны указать URL для его обработчика ``remote API`` с
помощью параметра ``-u``:

.. code-block:: bash

  $ python manage.py restore_all -n 20090919local -u http://localhost:8080/remote_api


Замечание насчет автогенирируемых ids
-------------------------------------

Когда вы восстанавливаете данные способами описанными выше, все
автогенерируемые ids будут восстановлены назад, также как и любые
ReferenceProperty, а так же зависимости между наследниками/родителями.
Это очень хорошо, но вы должны помнить, что восстановление данных,
зарезервированных из разных окружений, может вызвать коллизии между
востанавливаемыми данными и автогенерируемыми ids, в результате чего
существующие элементы будут заменены восстанавливаемыми.

Также, конфликты возможны между автогенерируемыми ids в новых appid и ids
восстановливаемых данных. В таком случае вы можете вызвать
``datastore.AllocateIds()`` для разрешения этих конфликтов. Нужно заметить,
что на текущий момент не существует возможности полного контроля над
диапазоном выделяемых id, т.к. это было бы сложно, если вообще возможно,
в большинстве случаев.

На текущий момент, самым простым решеним будет сохранение всех ваших объектов
с свойством key_names. Для этого используйте класс ``kay.models.NamedModel``.
Этот класс имеет метод ``create_new_entity()`` для создания объекта класса
с случайно сгенерированным uuid, который будет сохранен в свойстве key_name.

Сейчас команда разработчиков App Engine работает над реализацией возможности
восстановления данных на другие appid. Подождем, пока они все закончат.

Возможные проблемы с резервированием/восстановлением и пути их решения
----------------------------------------------------------------------

При ошибках резервирования/восстановления вы можете кофигурирровать bulkloader
для каждой сущности с помощью создания файла ``_backup/__init.py__``.

* Проблема 1

  Когда восстанавливаемые объекты большие, то восстановление более чем одного
  объекта может привести к ошибке. Это происходит потому, что любой вызов API
  ограничен 1Мб. Вы можете настроить bulkloader на восстановление
  одного объекта, например ``bbs_image``, в одном вызове API, путем создания
  ``_backup/__init__.py`` со следующим кодом:

.. code-block:: python

    restore_options = {
      'bbs_image': ['--batch_size=1'],
    }

* Проблема 2

  Резервирование 1000 и более объектов с локального сервера разработки может
  вызвать ошибку (TODO: Описать ошибку). Для решения данной проблемы
  используйте следующую конфигурацию bulkloader:

  _backup/__init__.py:

.. code-block:: python

    dump_options = {
      'chat_message': ['--num_threads=1'],
    }

Если у вас возникнут какие-либо другие ошибки, пожалуйста, дайте мне знать и я
дополню этот раздел.

